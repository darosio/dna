[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [
  {name = 'Daniele Arosio', email = 'darosio@duck.com'}
]
classifiers = [
  "Environment :: Console",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Unix Shell",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering",
  "Development Status :: 3 - Alpha"
]
dependencies = [
  "biopython <= 1.84",
  "click <= 8.1.7",
  "matplotlib <= 3.9.2",
  "numpy <= 2.1.1",
  "pandas <= 2.2.2",
  "pyarrow <= 17.0.0",
  "minotaor>=0.2.1",
  "dna-features-viewer>=3.1.3"
]
description = "To design DNA constructs."
keywords = ["ADD_FIRST", "ADD_SECOND"]
license = "BSD-3-Clause"
name = "dna"
requires-python = ">=3.11"
version = "0.0.1"

[project.optional-dependencies]
dev = [
  "commitizen <= 3.29.0",
  "ipykernel <= 6.29.5",
  "ipython <= 8.27.0",
  "jupyter <= 1.1.1",
  "pre-commit <= 3.8.0",
  "pylsp-mypy <= 0.6.9",
  "ruff <= 0.6.5",
  "ruff-lsp == 0.0.56"
]
docs = [
  "Sphinx <= 8.0.2",
  "autodocsumm <= 0.2.13",
  "nbsphinx <= 0.9.5",
  "pydata-sphinx-theme <= 0.15.4",
  "sphinx-click <= 6.0.0",
  "sphinx_autodoc_typehints <= 2.4.3",
  "sphinxcontrib-plantuml <= 0.30"
]
tests = [
  "Pygments <= 2.18.0",  # color xdoctest
  "coverage[toml] <= 7.6.1",
  "mypy <= 1.11.2",
  "pandas-stubs <= 2.2.2.240909",
  "pytest <= 8.3.3",
  "types-click <= 7.1.8",
  "xdoctest <= 1.2.0"
]

[tool.codespell]
count = true
ignore-words-list = "ciao,luce"
quiet-level = 3
skip = "examples/*.ipynb"

[tool.commitizen]
name = "cz_customize"
tag_format = "v$version"
version = "0.0.1"
version_files = [
  "pyproject.toml:version",
  "docs/conf.py:release",
  "tests/test_cli.py:expected_version"
]

[tool.commitizen.customize]
bump_map = {"^.+!:" = "MAJOR", "BREAKING CHANGE" = "MAJOR", "feat" = "MINOR", "fix" = "PATCH", "perf" = "PATCH", "refactor" = "PATCH"}
bump_pattern = "^(BREAKING CHANGE|feat|fix|perf|refactor)"
change_type_map = {"feat" = "Feat", "fix" = "Fix", "docs" = "Docs", "build" = "Build", "style" = "Style", "refactor" = "Refactor", "perf" = "Perf", "test" = "Test", "ci" = "CI/CD"}
change_type_order = ["BREAKING CHANGE", "Feat", "Fix", "Docs", "Style", "Perf", "Test", "Build", "CI/CD"]
changelog_pattern = "^(feat|fix|docs|style|refactor|perf|test|build|ci)?(\\(.*\\))?(!)?"
commit_parser = "^(?P<change_type>feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(?:\\((?P<scope>[^()\r\n]*)\\)|\\()?(?P<breaking>!)?:\\s(?P<message>.*)?"
example = """fix(parser): correct minor typos in code\n
see the issue for details on the typos fixed\n
closes issue #12
"""
info_path = "cz_customize_info.txt"
message_template = "{{change_type}}:{% if show_message %} {{message}}{% endif %}"
schema = """
<type>(<scope>): <subject>
<BLANK LINE>
<body>
<BLANK LINE>
(BREAKING CHANGE: )<footer>
"""
schema_pattern = "^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert|bump)(?:\\(([^()\r\n]*)\\)|\\()?(!)?:\\s(.*)?|^git-annex in"

[[tool.commitizen.customize.questions]]
choices = [
  {value = "feat", name = "feat: A new feature. Correlates with MINOR in SemVer"},
  {value = "fix", name = "fix: A bug fix. Correlates with PATCH in SemVer"},
  {value = "perf", name = "perf: A code change that improves performance. Correlates with PATCH in SemVer"},
  {value = "docs", name = "docs: Documentation only changes"},
  {value = "style", name = "style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)"},
  {value = "refactor", name = "refactor: A code change that neither fixes a bug nor adds a feature"},
  {value = "test", name = "test: Adding missing or correcting existing tests"},
  {value = "build", name = "build: Changes that update the build system, development tools or external dependencies"},
  {value = "ci", name = "ci: Changes to our CI configuration files and scripts (example scopes: GitLabCI)"},
  {value = "revert", name = "revert: Reverting to previous commit(s)."}
]
message = "Select the type of change you are committing"
name = "change_type"
type = "list"

[[tool.commitizen.customize.questions]]
message = "Body."
name = "message"
type = "input"

[[tool.commitizen.customize.questions]]
message = "Do you want to add body message in commit?"
name = "show_message"
type = "confirm"

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.report]
# fail_under = 100
exclude_lines = [
  "pragma: no cover"
]
show_missing = true

[tool.coverage.run]
branch = true
omit = ["*__init__.py"]
source = ["dna", "tests"]

[tool.hatch.envs.default]
features = ["dev", "tests", "docs"]

[tool.hatch.envs.default.scripts]
# {args} e.g. "--increment PATCH"
bump = [
]
ch = "cz ch --incremental --unreleased-version HEAD"
clean = "rm -rf ./build .coverage ./__pycache__ ./.mypy_cache ./.pytest_cache ./docs/_build ./tests/__pycache__ ./dist ./src/dna/__pycache__"
docs = "sphinx-build docs docs/_build"
docserve = "python -m http.server 8000 -d docs/_build"
init = [
  "pre-commit --version",
  "pre-commit install",
  "pre-commit install --hook-type commit-msg --hook-type pre-push"
]
lint = [
  "pre-commit --version",
  "pre-commit run --all-files --show-diff-on-failure {args}"  # No need for --hook-stage=manual
]

[tool.hatch.envs.tests]
features = ["tests"]
template = "tests"

[[tool.hatch.envs.tests.matrix]]
python = ["3.12", "3.11"]

[tool.hatch.envs.tests.scripts]
all = ["test", "type", "xdoc", "cov"]
cov = [
  "coverage combine",
  "coverage report",
  "coverage xml"
]
test = "coverage run -p -m pytest -v"
type = "mypy src tests docs/conf.py"
xdoc = "python -m xdoctest dna all"

[tool.isort]
combine_as_imports = true
force_single_line = false
include_trailing_comma = true
known_first_party = "dna"
line_length = 88  # to match black's default line length
multi_line_output = 3
profile = "black"

[tool.mypy]
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
# exclude = ""
plugins = ["numpy.typing.mypy_plugin"]
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict = true
warn_unreachable = true
warn_unused_configs = true

[tool.pdm]
hatch_compat = true

[tool.pylsp-mypy]
dmypy = false
enabled = true
live_mode = true
strict = true

[tool.ruff]
extend-exclude = [""]
extend-include = ["*.ipynb"]
force-exclude = true
line-length = 88
target-version = "py312"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
ignore = ["ANN101", "ANN102", "ISC001"]
select = [
  "A",  # builtins
  "AIR",  # airflow
  "ANN",  # typing annotation
  "ARG",  # unused arguments
  "B",  # bugbear
  "BLE",  # blind-except
  "C",
  "C4",  # comprehensions
  "C90",  # mccabe
  "D",  # pydocstyle
  "DTZ",  # dates
  "E",  # pycodestyle
  "EM",  # exceptions
  "ERA",  # eradicate
  "F",  # pyflakes
  "FBT",  # boolean-trap
  "FLY",  # flyntp
  "FURB",  # refurbishing and modernizing
  "I",  # isort
  "ICN",  # import conventions (opinionated)
  "ISC",  # implicit-str-concat
  "N",  # pep8-naming
  "NPY",
  "PD",  # pandas-vet
  "PERF",  # pperformance anti pattern
  "PGH",  # pygrep WAIT
  "PL",  # pylint see PLR2004...
  "PT",  # pytest-style
  "PTH",  # use-pathlib
  "Q",  # quotes
  "RET",  # Return
  "RSE",  # Raise
  "RUF",  # Ruff
  "S",  # bandit XXX
  "SIM",  # simplify
  "SLF",  # private self
  "SLOT",  # __slot__
  "TCH",  # TYPE_CHECKING
  "TD",  # TODOs
  "FIX",  # no fixme
  "TID",  # tidy-imports
  "TRY",  # tryceratops
  "UP",  # pyupgrade
  "W",  # pycodestyle
  "YTT"  # 2020
]
isort.combine-as-imports = true
isort.force-single-line = false
isort.known-first-party = ["dna"]
isort.split-on-trailing-comma = true
mccabe.max-complexity = 12

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = ["ERA"]
"__init__.py" = ["I002"]  # don't need annotations
"tests/*" = [
  "PLR2004",
  "S101"
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
